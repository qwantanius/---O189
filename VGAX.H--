/*
    SPHINX Programming (C) 1993.
    TITLE:  VGAX.H--
    DESCRIPTION:  This file contains a collection of procedures for writing
                  icons and pixels to VGA mode 19 when in multi-page format.
                  The following three constants must be set before including
                  this file:
                   LOGICALSCREENWIDTH  // the width of the screen in pixels
                                       // must be evenly divisable by 8.
                   LOGICALSCREENHEIGHT // the height of the screen in pixels
                   THECLEARCOLOR    // the colour which is not transfered to
                                    // to the screen, for overicon_x() and
                                    // swapicon_x().
                  For example:
                      ?define LOGICALSCREENWIDTH    640
                      ?define LOGICALSCREENHEIGHT   200
                      ?define THECLEARCOLOR        0xFF
    LAST MODIFIED:  1 Nov 1993
    PROCEDURES DEFINED IN THIS FILE:
        : byte set320x200mode(byte resetmouse)
        : byte set320x240mode(byte resetmouse)
        : void CLEARSCREEN_X(pagenum)
        : byte getpixel_x(x,y)
        : void overicon_x(x,y,imageseg,imageoff)
        : void puticon_x(x,y,bufseg,bufoff)
        : void putletter_x(x,y,charbuf_off; byte fgc,bgc)
        : void putpixel_x(x,y; byte color)
        : void swapicon_x(x,y,bufseg,bufoff)
*/


: byte set320x200mode (byte resetmouse)
/* Returns TRUE if successfully set video mode, else returns FALSE.
   This procedures does not ensure that the video memory has been cleared.
*/
{
AX = 19;
$INT 0x10
AH = 0xF;
$INT 0x10
IF( AL != 19 )
    return(FALSE);
IF( resetmouse )
    {AX = 0;
    $ INT 0x33 //  @ RESETMOUSE();
    }
@ TURNOFFCHAIN4();
@ SETSCREENWIDTH( ,LOGICALSCREENWIDTH/8);
return(TRUE);
}



?define SC_INDEX    0x3c4   // Sequence Controller Index
?define CRTC_INDEX  0x3d4   // CRT Controller Index
?define MISC_OUTPUT 0x3c2   // Miscellaneous Output register


: byte set320x240mode (byte resetmouse)
/* returns TRUE on success, FALSE otherwise */
{
AX = 19;
$INT 0x10   // mode (320x200 linear)
AH = 0xF;
$INT 0x10
IF( AL != 19 )
    return(FALSE);
IF( resetmouse > 0 )
    {AX = 0;
    $ INT 0x33 //  @ RESETMOUSE();
    }
DX = SC_INDEX;
AX = 0x604;
$ OUT DX,AX  // disable chain4 mode

AX = 0x100;
$ OUT DX,AX  // synchronous reset while setting Misc Output
             // for safety, even though clock unchanged
DX = MISC_OUTPUT;
AL = 0xE3;
$ OUT DX,AL  // select 25 MHz dot clock & 60 Hz scanning rate

DX = SC_INDEX;
AX = 0x300;
$ OUT DX,AX  // undo reset (restart sequencer)

DX = CRTC_INDEX;    // reprogram the CRT Controller
AL = 0x11;          // VSync End reg contains register write
$ OUT DX,AL         // protect bit
DX++;               // CRT Controller Data register
$ IN AL,DX          // get current VSync End register setting
AL &= 0x7F;         // remove write protect on various
$ OUT DX,AL         // CRTC registers
DX--;               // CRT Controller Index
$CLD
AX = 0x0d06;   // vertical total
$ OUT DX,AX
AX = 0x3e07;   // overflow (bit 8 of vertical counts)
$ OUT DX,AX
AX = 0x4109;   // cell height (2 to double-scan)
$ OUT DX,AX
AX = 0xea10;   // v sync start
$ OUT DX,AX
AX = 0xac11;   // v sync end and protect cr0-cr7
$ OUT DX,AX
AX = 0xdf12;   // vertical displayed
$ OUT DX,AX
AX = 0x0014;   // turn off dword mode
$ OUT DX,AX
AX = 0xe715;   // v blank start
$ OUT DX,AX
AX = 0x0616;   // v blank end
$ OUT DX,AX
AX = 0xe317;   // turn on byte mode
$ OUT DX,AX
@ SETSCREENWIDTH( ,LOGICALSCREENWIDTH/8);
return(TRUE);
}


: void CLEARSCREEN_X ()  /* AX = page number (1,2,3 or 4)  */
/*  Clears the video page number specified by AX
*/
{
CX = LOGICALSCREENWIDTH/4 * LOGICALSCREENHEIGHT;
AX = AX * CX;
DI = AX;
DX = 0x3C4;                            
AL = 2;
$OUT DX,AL                              
DX++;
AL = 0xF;
$OUT DX,AL                              
CX >>= 1;
ES = 0xA000;
AX = 0;
$REPZ	                                   
$STOSW	                                   
}


: byte getpixel_x (word x,y)
/*  Get the value of a pixel in VGA mode X.
*/
{
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 * y;
BX = x;
CX = BX & 3;
BX >>= 1;
BX >>= 1;
BX += AX;
DX = 0x3CE;                            
AL = 4;
$OUT DX,AL
DX++;
AL = CL;
$OUT DX,AL                              
AL = ESBYTE[BX];
}


: void putpixel_x (word x,y; byte color)
/*  Put a pixel in VGA mode X.
*/
{
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 * y;
BX = x;
CL = BL & 3;
BX >>= 1;
BX >>= 1;
BX += AX;
DX = 0x3C4;                            
AL = 2;
$ OUT DX,AL
DX++;
AL = 1;
$SHL AL,CL                              
$OUT DX,AL
ESBYTE[BX] = color;
}


: void puticon_x (word x,y,bufseg,bufoff)
{
$PUSH	DS                                 
$LDS	SI,bufoff                         
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 *y;
BX = x;
$MOV	DX,BX                              
$AND	BL,03                              
$MOV	CL,02                              
$SHR	DX,CL                              
$MOV	CL,BL                              
$ADD	AX,DX                              
$MOV	BP,AX                              
$MOV	DI,AX                              
$LODSW	                                   
$MOV	BX,AX                              
$MOV	CH,AL                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
DX++;
$MOV	AL,01                              
$SHL	AL,CL                              
$OUT	DX,AL                              
HERE2:
$MOV	BL,CH                              
HERE1:
$MOVSB	                                   
$DEC	BL                                 
$JNZ	HERE1                               
$ADD	DI,LOGICALSCREENWIDTH/4                             
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE2                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE3                               
$INC	BP                                 
$MOV	CL,00                              
HERE3:
$MOV	DI,BP                              
$MOV	DX,0x3C5                            
$MOV	AL,01                              
$SHL	AL,CL                              
$OUT	DX,AL                              
HERE5:
$MOV	BL,CH                              
HERE4:
$MOVSB	                                   
$DEC	BL                                 
$JNZ	HERE4                               
$ADD	DI,LOGICALSCREENWIDTH/4                                                          
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE5                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE6                               
$INC	BP                                 
$MOV	CL,00                              
HERE6:
$MOV	DI,BP                              
$MOV	DX,0x3C5                            
$MOV	AL,01                              
$SHL	AL,CL                              
$OUT	DX,AL                              
HERE8:
$MOV	BL,CH                              
HERE7:
$MOVSB	                                   
$DEC	BL                                 
$JNZ	HERE7                               
$ADD	DI,LOGICALSCREENWIDTH/4                             
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE8                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE9                               
$INC	BP                                 
$MOV	CL,00                              
HERE9:
$MOV	DI,BP                              
$MOV	DX,0x3C5                            
$MOV	AL,01                              
$SHL	AL,CL                              
$OUT	DX,AL                              
HERE11:
$MOV	BL,CH                              
HERE10:
$MOVSB	                                   
$DEC	BL                                 
$JNZ	HERE10                               
$ADD	DI,LOGICALSCREENWIDTH/4                             
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE11                               
$POP	DS                                 
}


: void swapicon_x (word x,y,bufseg,bufoff)
{
$PUSH	DS                                 
$LDS	SI,bufoff                         
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 * y;
BX = x;
$MOV	DX,BX                              
$AND	BL,03                              
$MOV	CL,02                              
$SHR	DX,CL                              
$MOV	CL,BL                              
$ADD	AX,DX                              
$MOV	BP,AX                              
$MOV	DI,AX                              
$LODSW	                                   
$MOV	BX,AX                              
$MOV	CH,AL                              
$MOV	DX,0x3CE                            
$MOV	AL,04                              
$OUT	DX,AL                              
$MOV	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
HERE3:
$MOV	BL,CH                              
HERE2:
$LODSB	                                   
$CMP	AL,THECLEARCOLOR                              
$JZ	HERE1                               
$XCHG	AL,ESBYTE[DI]                            
DSBYTE[SI-1] = AL;                         
HERE1:
$INC	DI                                 
$DEC	BL                                 
$JNZ	HERE2                               
$ADD	DI,LOGICALSCREENWIDTH/4                                                        
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE3                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE4                               
$INC	BP                                 
$MOV	CL,00                              
HERE4:
$MOV	DI,BP                              
$MOV	DX,0x3CE                            
$MOV	AL,04                              
$OUT	DX,AL                              
$MOV	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
HERE7:
$MOV	BL,CH                              
HERE6:
$LODSB	                                   
$CMP	AL,THECLEARCOLOR                              
$JZ	HERE5                               
$XCHG	AL,ESBYTE[DI]                            
DSBYTE[SI-1] = AL;                         
HERE5:
$INC	DI                                 
$DEC	BL                                 
$JNZ	HERE6                               
$ADD	DI,LOGICALSCREENWIDTH/4                                                        
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE7                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE8                               
$INC	BP                                 
$MOV	CL,00                              
HERE8:
$MOV	DI,BP                              
$MOV	DX,0x3CE                            
$MOV	AL,04                              
$OUT	DX,AL                              
$MOV	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
HERE11:
$MOV	BL,CH                              
HERE10:
$LODSB	                                   
$CMP	AL,THECLEARCOLOR                              
$JZ	HERE9                               
$XCHG	AL,ESBYTE[DI]                            
DSBYTE[SI-1] = AL;
HERE9:
$INC	DI                                 
$DEC	BL                                 
$JNZ	HERE10                               
$ADD	DI,LOGICALSCREENWIDTH/4                                                        
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE11                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE12                               
$INC	BP                                 
$MOV	CL,00                              
HERE12:
$MOV	DI,BP                              
$MOV	DX,0x3CE                            
$MOV	AL,04                              
$OUT	DX,AL                              
$MOV	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
HERE15:
$MOV	BL,CH                              
HERE14:
$LODSB	                                   
$CMP	AL,THECLEARCOLOR                              
$JZ	HERE13                               
$XCHG	AL,ESBYTE[DI]                            
DSBYTE[SI-1] = AL;                         
HERE13:
$INC	DI                                 
$DEC	BL                                 
$JNZ	HERE14                               
$ADD	DI,LOGICALSCREENWIDTH/4                            
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE15                               
$POP	DS                                 
}


: void overicon_x (word x,y,bufseg,bufoff)
{
$PUSH DS                                 
$LDS SI,bufoff                        
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 * y;
BX = x;
DX = BX;                             
BL &= 3;
CL = 2;
DX >>= CL;
CL = BL;                              
AX += DX;
BP = AX;
DI = AX;
$LODSW	                                   
BX = AX;
CH = AL;
DX = 0x3C4;
AL = 2;
$OUT DX,AL                              
DX++;
AL = 1;
AL <<= CL;                              
$OUT DX,AL                              
HERE3:
BL = CH;
loop(BL)
    {
    $LODSB
    IF( AL != THECLEARCOLOR )
        ESBYTE[DI] = AL;                            
    DI++;
    }
$ADD	DI,LOGICALSCREENWIDTH/4                            
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE3                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE4                               
$INC	BP                                 
$MOV	CL,00                              
HERE4:
DI = BP;
DX = 0x3C5;
AL = 1;                            
$SHL AL,CL                              
$OUT DX,AL                              
// HERE7:
loop(BH) 
    {BL = CH;
    loop(BL)
        {$LODSB
        IF( AL != THECLEARCOLOR )
            ESBYTE[DI] = AL;
        DI++;
        }
    $ADD DI,LOGICALSCREENWIDTH/4                            
    $XOR DH,DH                              
    $MOV DL,CH                              
    $SUB DI,DX
    }
//    $DEC BH
//    $JNZ HERE7
BH = AH;
CL++;
$TEST	CL,04                              
$JZ	HERE8                               
BP++;
CL = 0;
HERE8:
DI = BP;
DX = 0x3C5;
AL = 1;
AL <<= CL;
$OUT	DX,AL                              
HERE11:
BL = CH;
loop(BL)
    {$LODSB
    IF( AL != THECLEARCOLOR )
        ESBYTE[DI] = AL;
    DI++;
    }
$ADD	DI,LOGICALSCREENWIDTH/4                            
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE11                               
$MOV	BH,AH                              
$INC	CL                                 
$TEST	CL,04                              
$JZ	HERE12                               
$INC	BP                                 
$MOV	CL,00                              
HERE12:
$MOV	DI,BP                              
$MOV	DX,0x3C5                            
$MOV	AL,01                              
$SHL	AL,CL                              
$OUT	DX,AL                              
HERE15:
$MOV	BL,CH                              
loop(BL)
    {$LODSB
    IF( AL != THECLEARCOLOR )
        ESBYTE[DI] = AL;
    DI++;
    }
$ADD	DI,LOGICALSCREENWIDTH/4                            
$XOR	DH,DH                              
$MOV	DL,CH                              
$SUB	DI,DX                              
$DEC	BH                                 
$JNZ	HERE15                               
$POP	DS                                 
}


: void putletter_x (word x,y,charbuf_off; byte fgc,bgc)
{
SI = charbuf_off;                         
ES = 0xA000;
AX = LOGICALSCREENWIDTH/4 * y;
CX = x;
$MOV	DX,CX                              
$SHR	DX,1                               
$SHR	DX,1                               
$AND	CL,03                              
$ADD	AX,DX                              
BH = fgc;
CH = bgc;
$SUB	BH,CH                              
$MOV	BP,AX                              
$MOV	DI,BP                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	BL,08                              
DOWN3:
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN1                               
$ADD	AH,BH                              
DOWN1:
$MOV	AL,AH                              
$STOSB	                                   
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN2                               
$ADD	AH,BH                              
DOWN2:
$MOV	AL,AH                              
$STOSB	                                   
$ADD	DI,LOGICALSCREENWIDTH/4-2                            
$DEC	BL                                 
$JNZ	DOWN3                               
$INC	CL                                 
$TEST	CL,04                              
$JZ	DOWN4                               
$INC	BP                                 
$MOV	CL,00                              
DOWN4:
$MOV	DI,BP                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	BL,08                              
DOWN7:
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN5                               
$ADD	AH,BH                              
DOWN5:
$MOV	AL,AH                              
$STOSB	                                   
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN6                               
$ADD	AH,BH                              
DOWN6:
$MOV	AL,AH                              
$STOSB	                                   
$ADD	DI,LOGICALSCREENWIDTH/4-2                            
$DEC	BL                                 
$JNZ	DOWN7                               
$INC	CL                                 
$TEST	CL,04                              
$JZ	DOWN8                               
$INC	BP                                 
$MOV	CL,00                              
DOWN8:
$MOV	DI,BP                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	BL,08                              
DOWN11:
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN9                               
$ADD	AH,BH                              
DOWN9:
$MOV	AL,AH                              
$STOSB	                                   
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN10                               
$ADD	AH,BH                              
DOWN10:
$MOV	AL,AH                              
$STOSB	                                   
$ADD	DI,LOGICALSCREENWIDTH/4-2                            
$DEC	BL                                 
$JNZ	DOWN11                               
$INC	CL                                 
$TEST	CL,04                              
$JZ	DOWN12                               
$INC	BP                                 
$MOV	CL,00                              
DOWN12:
$MOV	DI,BP                              
$MOV	DX,0x3C4                            
$MOV	AL,02                              
$OUT	DX,AL                              
$MOV	AL,01                              
$SHL	AL,CL                              
$INC	DX                                 
$OUT	DX,AL                              
$MOV	BL,08                              
DOWN15:
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN13                               
$ADD	AH,BH                              
DOWN13:
$MOV	AL,AH                              
$STOSB	                                   
$MOV	AH,CH                              
$LODSB	                                   
$CMP	AL,00                              
$JZ	DOWN14                               
$ADD	AH,BH                              
DOWN14:
$MOV	AL,AH                              
$STOSB	                                   
$ADD	DI,LOGICALSCREENWIDTH/4-2                            
$DEC	BL                                 
$JNZ	DOWN15                               
}


/* end of VGAX.H-- */